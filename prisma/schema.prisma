// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}


enum Role {
  USER
  ADMIN
  CEO
  Manager
  Accountant
}

enum OrderStatus {
  PENDING
  PROCESSING
  SHIPPED
  DELIVERED
  CANCELLED
}

enum PaymentMethod {
  CREDIT_CARD
  PAYPAL
  CASH_ON_DELIVERY
}

enum PaymentStatus {
  PENDING
  COMPLETED
  FAILED
}

enum SupportStatus {
  OPEN
  IN_PROGRESS
  RESOLVED
  CLOSED
}

enum ReportType {
  SALES
  REVIEWS
  INVENTORY
  USERS
}

model User {
  id              String              @id
  name            String
  email           String           @unique
  picture         String
  shippingAddress String?
  mobile          String?
  passwordHash    String?
  role            Role             @default(USER)
  orders          Order[]
  reviews         Review[]
  cart            Cart?
  supportRequests SupportRequest[]
}

model Product {
  id             Int              @id @default(autoincrement())
  name           String
  picture        String
  version        String?
  description    String?
  price          Float
  quantity       Int              @default(0)
  published      Boolean          @default(true)
  categoryId     Int
  category       Category  @relation(fields: [categoryId], references: [id])
  OrderItem      OrderItem[]
  CartItem       CartItem[]
  Review         Review[]
  Warranty       Warranty?
  Stock          Stock[]
  SupportRequest SupportRequest[]
}

model Category {
  id          Int       @id @default(autoincrement())
  name        String
  description String?
  image       String
  published   Boolean       @default(true)
  products    Product[]
  promotions  Promotion[]
}

model Warehouse {
  id       Int     @id @default(autoincrement())
  name     String
  location String
  stocks   Stock[]
}

model Stock {
  id          Int       @id @default(autoincrement())
  productId   Int
  warehouseId Int
  quantity    Int
  product     Product   @relation(fields: [productId], references: [id])
  warehouse   Warehouse @relation(fields: [warehouseId], references: [id])
}

model Order {
  id              Int         @id @default(autoincrement())
  userId          String
  orderDate       DateTime    @default(now())
  totalAmount     Float
  shippingAddress String
  status          OrderStatus @default(PENDING)
  user            User        @relation(fields: [userId], references: [id])
  orderItems      OrderItem[]
  payment         Payment?
}

model OrderItem {
  id        Int     @id @default(autoincrement())
  orderId   Int
  productId Int
  quantity  Int
  price     Float
  order     Order   @relation(fields: [orderId], references: [id])
  product   Product @relation(fields: [productId], references: [id])
}

model Cart {
  id        Int        @id @default(autoincrement())
  userId    String     @unique
  createdAt DateTime   @default(now())
  user      User       @relation(fields: [userId], references: [id])
  cartItems CartItem[]
}

model CartItem {
  id        Int     @id @default(autoincrement())
  cartId    Int
  productId Int
  quantity  Int
  cart      Cart    @relation(fields: [cartId], references: [id])
  product   Product @relation(fields: [productId], references: [id])
}

model Payment {
  id            Int           @id @default(autoincrement())
  orderId       Int           @unique
  paymentDate   DateTime      @default(now())
  amount        Float
  paymentMethod PaymentMethod
  status        PaymentStatus @default(PENDING)
  order         Order         @relation(fields: [orderId], references: [id])
}

model Promotion {
  id          Int      @id @default(autoincrement())
  code        String   @unique
  description String?
  discount    Float
  startDate   DateTime
  endDate     DateTime
  categoryId  Int
  category    Category  @relation(fields: [categoryId], references: [id])
  isActive    Boolean  @default(true)
}

model Review {
  id         Int      @id @default(autoincrement())
  productId  Int
  userId     String
  rating     Int      @default(1) @map("rating >= 1 AND rating <= 5")
  comment    String?
  reviewDate DateTime @default(now())
  product    Product  @relation(fields: [productId], references: [id])
  user       User     @relation(fields: [userId], references: [id])
}

model Warranty {
  id             Int     @id @default(autoincrement())
  productId      Int     @unique
  warrantyPeriod String
  warrantyPolicy String
  product        Product @relation(fields: [productId], references: [id])
}

model SupportRequest {
  id               Int           @id @default(autoincrement())
  userId           String
  productId        Int
  requestDate      DateTime      @default(now())
  issueDescription String
  status           SupportStatus @default(OPEN)
  user             User          @relation(fields: [userId], references: [id])
  product          Product       @relation(fields: [productId], references: [id])
}

model Report {
  id            Int        @id @default(autoincrement())
  reportType    ReportType
  generatedDate DateTime   @default(now())
  reportData    Json
}
